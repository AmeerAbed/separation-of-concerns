isolating rethink
  z. how to use these exercises
  0. program life-cycle & errors
    explicitly teach how to read the callstack
    firefox doesn't log callstack, this is a live-server thing?
    do these without asserts
    use errors to introduce the life-cycle stages?
    "you'll make many mistakes you don't yet understand, but you can understand what an error is!"
    the editor in the slides will give you helpful warnings and errors on the side.  it won't catch evertying but it helps
  1. comparisons and logic
    asserting
    logical operators
    strict comparisons
    order of operations
    pass the tests
  2. primitive-types-values
    typeof, type names are strings, challenges
    strings, quotes in quotes
    numbers
    boolean, undefined & null
    pass the tests
  3. variables
    declaration, assignment, reassignment (all let)
    let vs. const - cannot declare without assigning, cannot reassign;
    comparison vs. assignment
    stepped value swap
      - done
    challenges
      - swaps done
      - something const?
  4. type casting
    String
    Number
      Number
        anything string that can be made by casting a number to a string can be cast back
        anything else casts to NaN
      NaN
        now it makes a bit more sense?  NaN indicates that a non-numbery thing was cast to Number
    Boolean
  5. conditionals & block scope
  6. functions & test cases
  7. review challenges



